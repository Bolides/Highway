//
//  DemoSourceryWorker.swift
//  Automate
//
//  Created by Stijn on 16/12/2018.
//  Copyright © 2018 dooz. All rights reserved.
//

import Arguments
import Errors
import Foundation
import SignPost
import SourceryAutoProtocols
import SourceryWorker
import SwiftFormatWorker
import Terminal
import ZFile

public protocol AutomateHighwaySourceryWorkerProtocol: AutoMockable
{
    /// sourcery:inline:DemoSourceryWorker.AutoGenerateProtocol
    func attempt(_ async: @escaping (@escaping SourceryWorker.SyncOutput) -> Void)
    /// sourcery:end
}

public class AutomateHighwaySourceryWorker: AutomateHighwaySourceryWorkerProtocol, AutoGenerateProtocol
{
    public static let queue = DispatchQueue(label: "be.dooz.swiftformatWorker.sourceryWorker")

    // MARK: - Private

    private static let commonImportAutoMockable = Set(
        [
            TemplatePrepend.Import(name: "SourceryAutoProtocols"),
            TemplatePrepend.Import(name: "Foundation"),
            TemplatePrepend.Import(name: "os"),
        ]
    )

    private let signPost: SignPostProtocol
    private let workers: [SourceryWorkerProtocol]
    private let highwayCommandLineArguments: HighwayCommandLineOption.Values

    // MARK: - Init

    init(
        signPost: SignPostProtocol = SignPost.shared,
        highwayCommandLineArguments: HighwayCommandLineOption.Values = HighwayCommandLineOption.Values()
    ) throws
    {
        self.highwayCommandLineArguments = highwayCommandLineArguments
        self.signPost = signPost

        guard let relativeProjectPath = highwayCommandLineArguments.optionsAndValues[.srcroot] else
        {
            throw HighwayError.missingSrcroot(
                message: """
                You can provide the following options
                \(HighwayCommandLineOption.allCases.map { $0.rawValue }.joined(separator: "\n"))
                """,
                function: "\(#function)"
            )
        }

        let projectFolder = try Folder(relativePath: relativeProjectPath)

        signPost.message("💁🏻‍♂️ Sourcery don on Project in folder\n \(projectFolder.path)\n")

        let highwayFolder = try projectFolder.subfolder(named: "Sources/highway")
        let sourcesFolder = try highwayFolder.subfolder(named: "Sources")
        let carthageFolder = try projectFolder.subfolder(named: "Carthage")

        signPost.verbose("💁🏻‍♂️ Sources in folder\n \(sourcesFolder.path)\n")
        signPost.verbose("💁🏻‍♂️ Carthage in folder\n \(sourcesFolder.path)\n")

        let templateFolder = try Folder(relativePath: "Checkouts/template-sourcery/Sources/stencil", to: carthageFolder)
        let sourceryAutoProtocolFile = try highwayFolder.subfolder(named: "Sources/SourceryAutoProtocols/").file(named: "SourceryAutoProtocols.swift")
        let autoGeneratedCodeFolder = try highwayFolder.createSubfolderIfNeeded(withName: "/Sources/AutoGeneratedCode")

        let sourcerySequence = try Target.allCases.map
        { target in
            try Sourcery(
                sourcesFolders: [sourcesFolder.subfolder(named: target.rawValue)],
                individualSourceFiles: nil,
                templateFolder: templateFolder,
                outputFolder: try autoGeneratedCodeFolder.createSubfolderIfNeeded(withName: target.rawValue),
                sourceryAutoProtocolsFile: sourceryAutoProtocolFile,
                sourceryYMLFile: try highwayFolder.createFileIfNeeded(named: ".sourcery-\(target.rawValue).yml"),
                imports: target.imports()
            )
        }

        signPost.verbose("🧙‍♂️ Sourcery will run from config files ...")
        try sourcerySequence.forEach
        {
            signPost.verbose(
                """
                > \($0.sourceryYMLFile.path)
                
                ```yml
                \(try $0.sourceryYMLFile.readAsString())
                ```
                
                """
            )
        }

        workers = try sourcerySequence.map
        {
            try SourceryWorker(sourcery: $0, queue: AutomateHighwaySourceryWorker.queue)
        }
    }

    // MARK: - Error

    // MARK: - Sourcery Setup

    public func attempt(_ async: @escaping (@escaping SourceryWorker.SyncOutput) -> Void)
    {
        workers.forEach
        { [weak self] in

            guard let `self` = self else { return }

            $0.attempt
            { syncOutput in
                async
                {
                    let output = try syncOutput()
                    self.signPost.verbose("\(output.joined(separator: "\n"))")
                    return output
                }
            }
        }
    }

    // MARK: - Enum

    enum Target: String, CaseIterable
    {
        case Arguments
        case Git
        case Keychain
        case SignPost
        case SourceryWorker
        case Terminal
        case Url
        case XCBuild
        case Errors
        case POSIX
        case Task
        case SwiftformatWorker

        func imports() -> Set<TemplatePrepend>
        {
            // Insert the target itself
            var importNames = AutomateHighwaySourceryWorker.commonImportAutoMockable
            importNames.insert(TemplatePrepend.Import(name: rawValue))
            importNames.insert(TemplatePrepend.Import(name: VendorFramework.ZFile.rawValue))
            importNames.insert(TemplatePrepend.Import(name: VendorFramework.ZFileMock.rawValue))

            // If not the default, add a case and insert imports into importNames
            switch self {
            case .Task:
                importNames.insert(TemplatePrepend.Import(name: Target.Arguments.rawValue))
                importNames.insert(TemplatePrepend.Import(name: Target.SignPost.rawValue))

                return Set([TemplatePrepend(name: importNames, template: Template.AutoMockable.rawValue)])
            case .Terminal:
                importNames.insert(TemplatePrepend.Import(name: Target.Arguments.rawValue))

                return Set([TemplatePrepend(name: importNames, template: Template.AutoMockable.rawValue)])
            default:
                return Set([TemplatePrepend(name: importNames, template: Template.AutoMockable.rawValue)])
            }
        }
    }

    enum VendorFramework: String, CaseIterable
    {
        case ZFile
        case ZFileMock
    }

    enum Template: String
    {
        case AutoMockable
    }
}
