//
//  DemoSourceryWorker.swift
//  Automate
//
//  Created by Stijn on 16/12/2018.
//  Copyright © 2018 dooz. All rights reserved.
//

import Arguments
import Errors
import Foundation
import SignPost
import SourceryAutoProtocols
import SourceryWorker
import SwiftFormatWorker
import Terminal
import ZFile

public protocol HWSetupSourceryWorkerWorkerProtocol: AutoMockable
{
    /// sourcery:inline:HWSetupSourceryWorker.AutoGenerateProtocol
    func attempt(_ async: @escaping (@escaping SourceryWorker.SyncOutput) -> Void)
    /// sourcery:end
}

public class HWSetupSourceryWorker: HWSetupSourceryWorkerWorkerProtocol, AutoGenerateProtocol
{
    public static let queue = DispatchQueue(label: "be.dooz.swiftformatWorker.sourceryWorker")

    // MARK: - Private

    static let commonImportAutoMockable = Set(
        [
            TemplatePrepend.Import(name: "SourceryAutoProtocols"),
            TemplatePrepend.Import(name: "Foundation"),
            TemplatePrepend.Import(name: "os"),
        ]
    )

    private let signPost: SignPostProtocol
    private var workers: [SourceryWorkerProtocol]

    private let queue: DispatchQueue

    private let disk: SwiftPackageDependenciesProtocol
    private let swiftPackageDump: SwiftPackageDumpProtocol
    
    private let sourcesFolder: FolderProtocol
    private let templateFolder: FolderProtocol
    private let autoGeneratedCodeFolder: FolderProtocol

    private let sourceryAutoProtocolFile: FileProtocol
    private let dispatchGroup: DispatchGroup
    
    // MARK: - Init

    public init(
        disk: SwiftPackageDependenciesProtocol,
        dispatchGroup: DispatchGroup,
        swiftPackageDump: SwiftPackageDumpProtocol,
        signPost: SignPostProtocol = SignPost.shared,
        queue: DispatchQueue = HWSetupSourceryWorker.queue
    ) throws
    {
        self.signPost = signPost
        self.queue = queue
        self.disk = disk
        self.dispatchGroup = dispatchGroup
        self.swiftPackageDump = swiftPackageDump
        
        do {
            sourcesFolder = try disk.srcRoot().subfolder(named: "Sources")
            
            templateFolder = try disk.templateFolder().subfolder(named: "Sources/stencil")
            sourceryAutoProtocolFile = try disk.sourceryAutoProtocolFile()
            autoGeneratedCodeFolder = try sourcesFolder.createSubfolderIfNeeded(withName: "AutoGeneratedCode")
            workers = [SourceryWorkerProtocol]()
        } catch {
            throw "\(HWSetupSourceryWorker.self) \(#function) \(#line) \n\(error)\n"
        }
       
    }

    // MARK: - Error

    // MARK: - Sourcery Setup

    public func attempt(_ async: @escaping (@escaping SourceryWorker.SyncOutput) -> Void)
    {
        queue.async
        { [weak self] in
            guard let `self` = self else
            {
                async { throw "\(HWSetupSourceryWorker.self) \(#function) could not complete because self was released" }
                return
            }
            do
            {
                
                let sourceryExecutableFile = try SourceryBuilder().attemptToBuildSourceryIfNeeded()

                let sourcerySequence: [Sourcery] = try self.swiftPackageDump.products.compactMap
                { product in
                    
                    guard !product.name.hasSuffix("Mock") else {
                        return nil
                    }
                    
                    guard let hwProduct = HighwayProduct(rawValue: product.name) else {
                        throw "\(self) \(#function) \(#line) error in \(#file) \n \(product.name) is not a valid product name\n"
                    }
                    
                    return try Sourcery(
                        sourcesFolders: [self.sourcesFolder.subfolder(named: product.name)],
                        individualSourceFiles: nil,
                        templateFolder: self.templateFolder,
                        outputFolder: try self.autoGeneratedCodeFolder.createSubfolderIfNeeded(withName: hwProduct.rawValue),
                        sourceryAutoProtocolsFile: self.sourceryAutoProtocolFile,
                        sourceryYMLFile: try self.sourcesFolder.createFileIfNeeded(named: ".sourcery-\(hwProduct.rawValue).yml"),
                        imports: product.imports(),
                        sourceryExecutableFile: sourceryExecutableFile
                    )
                }

                self.signPost.verbose("🧙‍♂️ Sourcery will run from config files ...")

                try sourcerySequence.forEach
                {
                    self.signPost.verbose(
                        """
                        > \($0.sourceryYMLFile.path)
                        
                        ```yml
                        \(try $0.sourceryYMLFile.readAsString())
                        ```
                        
                        """
                    )
                }

                self.workers = try sourcerySequence.map
                {
                    try SourceryWorker(sourcery: $0, queue: HWSetupSourceryWorker.queue)
                }
            }
            catch
            {
                async { throw error }
                return
            }

            self.workers.forEach
            { [weak self] in
                
                guard let `self` = self else { return }
                
                self.dispatchGroup.enter()
                $0.attempt
                { syncOutput in
                    async
                    {
                        let output = try syncOutput()
                        self.signPost.verbose("\(output.joined(separator: "\n"))")
                        return output
                    }
                }
            }
            self.dispatchGroup.leave()

        }
    }

}
