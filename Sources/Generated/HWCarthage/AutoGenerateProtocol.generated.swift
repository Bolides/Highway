// Generated using Sourcery 0.15.0 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

//: Do not change this code as it is autogenerated every time you build.
//: You can change the code in `../StencilTemplatesForSourcery/Application/AutoGenerateProtocol
import Foundation

// MARK: - AutoGenerateProtocol

//: From all Types implementing this protocol Sourcery adds:
//: - public/internal variables // private variables are ignored
//: - public/internal methods (skips initializers)
//: - initializers marked with annotation // sourcery:includeInitInProtocol
//: - of the above it does not add it if  // sourcery:skipProtocol
//: ---

/*

 // Generated protocol inline for CarthageBuilder -> See code in the file of that type
 // sourcery:inline:CarthageBuilder.AutoGenerateProtocol
 static var carthageExecutableFolderPath: String { get }

 func attemptBuildCarthageIfNeeded() throws  -> FileProtocol
 // sourcery:end
 // Generated protocol inline for HWCarthage -> See code in the file of that type
 // sourcery:inline:HWCarthage.AutoGenerateProtocol
 static var queue: HighwayDispatchProtocol { get }

 func attemptRunCarthage(in folder: FolderProtocol, _ async: @escaping (@escaping HWCarthage.SyncOutput) -> Void)
 // sourcery:end
 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 // Generated protocol inline for  -> See code in the file of that type

 */
