//
//  DemoSourceryWorker.swift
//  Automate
//
//  Created by Stijn on 16/12/2018.
//  Copyright © 2018 dooz. All rights reserved.
//

import Foundation
import SourceryAutoProtocols
import ZFile
import Terminal
import SourceryWorker
import SignPost

protocol DemoSourceryWorkerProtocol {
    //// sourcery:inline:DemoSourceryWorker.AutoGenerateProtocol
    
    func attempt() throws
    
    //// sourcery:end
}

struct AutomateHighwaySourceryWorker: DemoSourceryWorkerProtocol, AutoGenerateProtocol {
    
    private let signPost: SignPostProtocol
    private let workers: [SourceryWorkerProtocol]
    
    init(signPost: SignPostProtocol = SignPost.shared, workers: [SourceryWorkerProtocol]? = nil) throws {
        self.signPost = signPost
        
        guard workers == nil else {
            self.workers = workers!
            return
        }
        
        let currentFolder = FileSystem().currentFolder
        signPost.message("💁🏻‍♂️ Running in folder\n \(currentFolder)\n")
        
        var carthageFolder: FolderProtocol!
        var sourcesFolder: FolderProtocol!
        
        do {
            sourcesFolder = try currentFolder.parentFolder().parentFolder()
            carthageFolder = try sourcesFolder.subfolder(named: "Carthage")
        } catch {
            signPost.message("💁🏻‍♂️ Not running in .build.nosync/Debug folder, trying to run from current folder.")
            sourcesFolder = currentFolder
            carthageFolder = try currentFolder.subfolder(named: "Carthage")
        }
        
        let sourcerySequence = [
            try sourceryForFolders(target: "Arguments", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "ArgumentsTests", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Deliver", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Errors", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Git", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Keychain", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "POSIX", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Result", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "SignPost", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "SourceryWorker", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Task", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Terminal", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "Url", sourcesFolder, carthageFolder),
            try sourceryForFolders(target: "XCBuild", sourcesFolder, carthageFolder),
        ]
        
        try sourcerySequence.forEach {
            signPost.message("""
                🧙‍♂️ Sourcery will run from config file
                > \($0.sourceryYMLFile.path)
                
                ```yml
                \(try $0.sourceryYMLFile.readAsString())
                ```
                
                """
            )
        }
        
        
        self.workers =  try sourcerySequence.map { try SourceryWorker(sourcery: $0) }
        
    }
    
    // MARK: - Sourcery Setup
    
    
    
    func attempt() throws {
        return try workers.forEach {
            let output = try $0.attempt()
            signPost.verbose("\(output.joined(separator: "\n"))")
        }
    }
}

private func sourceryForFolders(target: String, _ sourcesFolder: FolderProtocol, individualSourceFiles: [File]? = nil, _ carthageFolder: FolderProtocol) throws -> Sourcery {
    
    let demoFolder = try sourcesFolder.subfolder(named: "Demo")
    
    let highwayFolder = try Folder(relativePath: "Checkouts/highway", to: carthageFolder)
    let sourcesFolders = [ try demoFolder.subfolder(named: target) ]
    
    return try Sourcery(
        sourcesFolders: sourcesFolders,
        individualSourceFiles: individualSourceFiles,
        templateFolder: try Folder(relativePath: "Checkouts/template-sourcery/sources/stencil", to: carthageFolder),
        outputFolder: try demoFolder.subfolder(named: "AutoGeneratedCode").createSubfolderIfNeeded(withName: target),
        sourceryAutoProtocolsFile: try highwayFolder.file(named: "/Sources/AutoGeneratedCode/SourceryAutoProtocols.swift"),
        sourceryYMLFile: try sourcesFolder.createFileIfNeeded(named: ".sourcery-\(target).yml"),
        imports: Set([
            TemplatePrepend(
                name: Set([
                    TemplatePrepend.Import(name: target, testable: true),
                    TemplatePrepend.Import(name: "SourceryAutoProtocols"),
                    TemplatePrepend.Import(name: "Foundation"),
                    TemplatePrepend.Import(name: "Models"),
                    TemplatePrepend.Import(name: "os"),
                    ]),
                template: "AutoMockable")
            ])
    )
    
}
