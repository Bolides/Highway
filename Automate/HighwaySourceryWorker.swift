//
//  HighwaySourceryWorker.swift
//  Automate
//
//  Created by Stijn on 16/12/2018.
//

import Foundation
import SourceryAutoProtocols
import SourceryWorker
import os
import ZFile

protocol HighwaySourceryWorkerProtocol: AutoMockable {
    // sourcery:inline:HighwaySourceryWorker.AutoGenerateProtocol
    // sourcery:end
}

struct HighwaySourceryWorker: AutoGenerateProtocol {
    
    private let worker: SourceryWorkerProtocol
    
    init(worker: SourceryWorkerProtocol? = nil) throws {
        guard worker == nil else {
            self.worker = worker!
            return
        }
        
        let currentFolder = FileSystem().currentFolder
        os_log(.debug, "💁🏻‍♂️ Running in folder\n %@\n", "\(currentFolder)")
        
        let projectFolder = try currentFolder.parentFolder().parentFolder()
        let carthageFolder = try projectFolder.subfolder(named: "Carthage")
        os_log(.debug, "💁🏻‍♂️ Carthage in folder\n %@\n", "\(carthageFolder)")
        
        let sourcesFolders = try projectFolder.subfolder(named: "Sources")
        os_log(.debug, "💁🏻‍♂️ Sources are in folder\n %@\n", "\(sourcesFolders)")
        
        let sourcery = try Sourcery(
            sourcesFolders: sourcesFolders,
            templateFolder: try Folder(relativePath: "Checkouts/template-sourcery/sources/stencil", to: carthageFolder),
            outputFolder: try sourcesFolders.subfolder(named: "AutoGeneratedCode"),
            sourceryAutoProtocolsFile: try sourcesFolders.file(named: "AutoGeneratedCode/SourceryAutoProtocols.swift"),
            sourceryYMLFile: try projectFolder.createFileIfNeeded(named: ".sourcery.yml")
        )
        
        self.worker = try SourceryWorker(sourcery: sourcery)
    }

    func attempt() throws -> [String] {
        return try worker.attempt()
    }
}
